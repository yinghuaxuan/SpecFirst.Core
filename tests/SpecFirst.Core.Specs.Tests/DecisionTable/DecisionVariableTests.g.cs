
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by SpecFirst source generator.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SpecFirst.Core.Specs.Tests
{
    using System;
    using System.Collections.Generic;
    using Xunit;
    
    public partial class parse_decision_variable_from_links
    {
        [Theory]
        [MemberData(nameof(get_test_data))]
        public void parse_decision_variable_from_links_tests(string text, bool contain_variable, string variable_name, string variable_type, string variable_value)
        {
            (bool contain_variable_output, string variable_name_output, string variable_type_output, string variable_value_output) = parse_decision_variable_from_links_implementation(text);
            Assert.Equal(contain_variable_output, contain_variable);
            Assert.Equal(variable_name_output, variable_name);
            Assert.Equal(variable_type_output, variable_type);
            Assert.Equal(variable_value_output, variable_value);
        }

        public static IEnumerable<object[]> get_test_data()
        {
            var data = new List<object[]>
            {
                new object[] { "<a href=\"\" title=\"$variable_name\" data-href=\"\">this is a variable</a>", true, "variable_name", "string", "this is a variable" }, // variable must start with $ symbol followed by letter
                new object[] { "<a href=\"\" title=\"$variable123\" data-href=\"\">this is a variable</a>", true, "variable123", "string", "this is a variable" }, // variable must start with $ symbol followed by letter
                new object[] { "<a href=\"\" title=\"$123\" data-href=\"\">this is a variable</a>", false, "", "", "" }, // variable immediately followed by digit is not valid
                new object[] { "<a href=\"\" title=\"variable_name\" data-href=\"\">this is a variable</a>", false, "", "", "" }, // variable not start with $ symbol is not valid
                new object[] { "<a href=\"\" title=\"variable_$name\" data-href=\"\">this is a variable</a>", false, "", "", "" }, // variable with $ symbol not at the start is not valid
            };

            return data;
        }

        private partial (bool, string, string, string) parse_decision_variable_from_links_implementation(string text);
    }

    public partial class parse_decision_variable_from_tables
    {
        [Theory]
        [MemberData(nameof(get_test_data))]
        public void parse_decision_variable_from_tables_tests(string text, bool in_header, bool contain_variable, string variable_name, string variable_type, string variable_value)
        {
            (bool in_header_output, bool contain_variable_output, string variable_name_output, string variable_type_output, string variable_value_output) = parse_decision_variable_from_tables_implementation(text);
            Assert.Equal(in_header_output, in_header);
            Assert.Equal(contain_variable_output, contain_variable);
            Assert.Equal(variable_name_output, variable_name);
            Assert.Equal(variable_type_output, variable_type);
            Assert.Equal(variable_value_output, variable_value);
        }

        public static IEnumerable<object[]> get_test_data()
        {
            var data = new List<object[]>
            {
                new object[] { "$variable_name", true, true, "variable_name", "object", "" }, // variable must start with $ symbol followed by letter
                new object[] { "$variable123", true, true, "variable123", "object", "" }, // variable must start with $ symbol followed by letter
                new object[] { "$123", true, false, "", "", "" }, // variable immediately followed by digit is not valid
                new object[] { "variable_name", true, false, "", "", "" }, // variable not start with $ symbol is not valid
                new object[] { "variable_$name", true, false, "", "", "" }, // variable with $ symbol not at the start is not valid
            };

            return data;
        }

        private partial (bool, bool, string, string, string) parse_decision_variable_from_tables_implementation(string text);
    }

}